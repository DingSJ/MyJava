package com.china.designPattern.template;

/**
 * 模板方法模式是类的行为模式。准备一个抽象类，将部分逻辑以具体方法以及具体构造函数的形式实现，
 * 然后声明一些抽象方法来迫使子类实现剩余的逻辑。不同的子类可以以不同的方式实现这些抽象方法，
 * 从而对剩余的逻辑有不同的实现。这就是模板方法模式的用意。
 *
 * 抽象模板(Abstract Template)角色有如下责任：
 *
 * 　　定义了一个或多个抽象操作，以便让子类实现。这些抽象操作叫做基本操作，它们是一个顶级逻辑的组成步骤。
 * 　　定义并实现了一个模板方法。这个模板方法一般是一个具体方法，它给出了一个顶级逻辑的骨架，而逻辑的组成步骤在相应的抽象操作中，
 * 推迟到子类实现。顶级逻辑也有可能调用一些具体方法。
 *
 * 具体模板(Concrete Template)角色又如下责任：
 *
 * 　　实现父类所定义的一个或多个抽象方法，它们是一个顶级逻辑的组成步骤。
 * 　　每一个抽象模板角色都可以有任意多个具体模板角色与之对应，而每一个具体模板角色都可以给出这些抽象方法（也就是顶级逻辑的组成步骤）的不同实现，
 * 从而使得顶级逻辑的实现各不相同。
 *
 * 模板模式的关键是：子类可以置换掉父类的可变部分，但是子类却不可以改变模板方法所代表的顶级逻辑。
 *
 * 每当定义一个新的子类时，不要按照控制流程的思路去想，而应当按照“责任”的思路去想。换言之，应当考虑哪些操作是必须置换掉的，哪些操作是可以置换掉的，
 * 以及哪些操作是不可以置换掉的。使用模板模式可以使这些责任变得清晰。
 *
 * 模板方法模式中的方法
 * 　　模板方法中的方法可以分为两大类：模板方法和基本方法。
 *
 * 模板方法
 * 　　一个模板方法是定义在抽象类中的，把基本操作方法组合在一起形成一个总算法或一个总行为的方法。
 * 　　一个抽象类可以有任意多个模板方法，而不限于一个。每一个模板方法都可以调用任意多个具体方法。
 *
 * 基本方法
 * 　　基本方法又可以分为三种：抽象方法(Abstract Method)、具体方法(Concrete Method)和钩子方法(Hook Method)。
 * 　　抽象方法：一个抽象方法由抽象类声明，由具体子类实现。在Java语言里抽象方法以abstract关键字标示。
 * 　	具体方法：一个具体方法由抽象类声明并实现，而子类并不实现或置换。
 * 　　钩子方法：一个钩子方法由抽象类声明并实现，而子类会加以扩展。通常抽象类给出的实现是一个空实现，作为方法的默认实现。
 *
 * 默认钩子方法
 * 　　一个钩子方法常常由抽象类给出一个空实现作为此方法的默认实现。这种空的钩子方法叫做“Do Nothing Hook”。
 * 	显然，这种默认钩子方法在缺省适配模式里面已经见过了，一个缺省适配模式讲的是一个类为一个接口提供一个默认的空实现，
 * 	从而使得缺省适配类的子类不必像实现接口那样必须给出所有方法的实现，因为通常一个具体类并不需要所有的方法。
 *
 * 优点
 *
 * 提高代码复用性 - 将相同部分的代码放在抽象的父类中
 * 提高了拓展性 - 将不同的代码放入不同的子类中，通过对子类的扩展增加新的行为
 * 实现了反向控制 - 通过一个父类调用其子类的操作，通过对子类的扩展增加新的行为，实现了反向控制 & 符合“开闭原则”
 *
 * 缺点
 *
 * 引入了抽象类，每一个不同的实现都需要一个子类来实现，导致类的个数增加，从而增加了系统实现的复杂度。
 *
 * 应用场景
 *
 * 	一次性实现一个算法的不变的部分，并将可变的行为留给子类来实现；
 * 	各子类中公共的行为应被提取出来并集中到一个公共父类中以避免代码重复；
 * 	控制子类的扩展。
 *
 * */
public class TemplatePatternDemo {
   public static void main(String[] args) {
 
      Game game = new Cricket();
      game.play();
      System.out.println();
      game = new Football();
      game.play();
   }
}